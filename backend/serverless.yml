service: savearn-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  
  environment:
    DYNAMODB_TABLE_EARNINGS: ${self:service}-${self:provider.stage}-earnings
    COGNITO_USER_POOL_ID: !Ref CognitoUserPool
    COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
    LOG_LEVEL: DEBUG
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_EARNINGS}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_EARNINGS}/index/*"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  # Earnings CRUD operations
  createEarning:
    handler: src/handlers/earnings.create
    events:
      - http:
          path: /earnings
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoUserPoolAuthorizer
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Accept
              - Accept-Language
              - Accept-Encoding
            allowCredentials: false

  getEarnings:
    handler: src/handlers/earnings.list
    events:
      - http:
          path: /earnings
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoUserPoolAuthorizer
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Accept
              - Accept-Language
              - Accept-Encoding
            allowCredentials: false

  updateEarning:
    handler: src/handlers/earnings.update
    events:
      - http:
          path: /earnings/{id}
          method: put
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoUserPoolAuthorizer
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  deleteEarning:
    handler: src/handlers/earnings.delete
    events:
      - http:
          path: /earnings/{id}
          method: delete
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoUserPoolAuthorizer
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  # User profile operations
  getUserProfile:
    handler: src/handlers/users.getProfile
    events:
      - http:
          path: /user/profile
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoUserPoolAuthorizer
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

resources:
  Resources:
    # DynamoDB Tables
    EarningsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_EARNINGS}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: entryId
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: entryId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserDateIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: name
            AttributeDataType: String
            Required: true
            Mutable: true

    # Cognito User Pool Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: ${self:service}-${self:provider.stage}-client
        GenerateSecret: false
        RefreshTokenValidity: 30
        AccessTokenValidity: 1
        IdTokenValidity: 1
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH

    # API Gateway Authorizer
    CognitoUserPoolAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPoolAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: 
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPool
              - Arn

    # API Gateway Responses with CORS headers for errors
    ApiGatewayResponse4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Accept-Language,Accept-Encoding'"
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"

    ApiGatewayResponse5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Accept-Language,Accept-Encoding'"
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"

    ApiGatewayResponseUnauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId: !Ref ApiGatewayRestApi
        ResponseType: UNAUTHORIZED
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Accept-Language,Accept-Encoding'"
          "gatewayresponse.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'"

  Outputs:
    ApiEndpoint:
      Description: "API Gateway endpoint URL"
      Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
      Export:
        Name: ${self:service}-${self:provider.stage}-api-url

    CognitoUserPoolId:
      Description: "Cognito User Pool ID"
      Value: !Ref CognitoUserPool
      Export:
        Name: ${self:service}-${self:provider.stage}-user-pool-id

    CognitoUserPoolClientId:
      Description: "Cognito User Pool Client ID"
      Value: !Ref CognitoUserPoolClient
      Export:
        Name: ${self:service}-${self:provider.stage}-client-id
